---
description: 
globs: 
alwaysApply: true
---
For your personal chat project using Next.js, here's a **recommended stack** that balances simplicity, scalability, and ease of implementation:

- Check that there is are no errors after generating the code.

---

### **1. Authentication**
Use **NextAuth.js** (built for Next.js):
  - Supports Google/GitHub/Magic Link (email) authentication out of the box.
  - No need for a separate backend.
- **Firebase Auth** (if you prefer Googleâ€™s ecosystem).

---

### **2. Database : Firebase Firestore**:
- **Firebase Firestore** (NoSQL):
  - Real-time updates out of the box.
  - Simple to pair with Firebase Auth.
  - Use free cdn for media storage of chat.

---

### **3. Real-Time Chat**
- **Firebase Realtime Database**:
 - Without refreshing the page, data is synced across devices
---

### **4. Backend**
Use **Next.js API Routes** for:
- Sending messages.
- Fetching chat history.
- Handling authentication logic (e.g., verifying users).

---

### **5. Hosting**
- **Vercel** (optimized for Next.js, free tier).
---

### **6. Progressive Web APP (offline)**
Use **Next PWA & service worker**
- Whole application must run offline.
- when offline, in top frame, show that you are offline via caching
- The app is installable with detailed manifest file and necessary screenshots and shortcuts
- Implement all latest PWA api availabe for service worker

### **7. Testing**
Use **next/jest** 
- Check all the functionality and components are working as aspected 
- Do end to end testing


### **Database Structure Example**
For /Firestore:
```plaintext
chats (
  id: string
  user1_id: string (your admin user ID)
  user2_id: string (the other user's ID)
  messages: array [
    { text: string, sender_id: string, timestamp: date }
  ]
)
```
- Ensure each chat is unique to a pair of users (you + one other user).
- Use database security rules to restrict access to the two participants.
- store media by storing the cdn link, use any free cdn.

---

### **Implementation Steps**
1. **Authentication Setup**:
   - Configure NextAuth.js with Google/GitHub or email magic links.
   - Store user IDs in the database.

2. **Chat Logic**:
   - When a user logs in, check if a chat exists between them and your admin account. If not, create one.
   - All users can chat with admin only, not to each other.
   - There will be a chat box and all messages will be sent to admin
   - "mohit.patel1966@gmail.com" is the admin email account
   - when logged in with admin account, all chats will be shown and admin can message which is visible to related account only.
   - Use real-time subscriptions to sync messages between participants.

3. **UI**:
   - Build a beautiful fun chat interface with message list and input field.
   - Enable media sharing in chat window.
   - Show only the chat between the logged-in user and your admin account.
   - Use arial fonts
---

4. **CI/CD**:
    - Implement *simple-git-hooks* and runs build command before pushing, if the command fails, it doesn't let you push.

5. **Notification**
link: https://medium.com/@ameerezae/implementing-web-push-notifications-in-next-js-a-complete-guide-e21acd89492d